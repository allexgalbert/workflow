Ajax глобальные события

запрос завершился
$(document).ajaxComplete(function(event, xhr, settings) {});

запрос завершился с ошибкой
$(document).ajaxError(function(event, jqxhr, settings, thrownError) {});

запрос завершился успешно
$(document).ajaxSuccess(function(event, xhr, settings) {});

до отправки запроса
$(document).ajaxSend(function(event, jqxhr, settings) {});

запуск первого запроса
$(document).ajaxStart(function() {});

после отправки всех запросов
$(document).ajaxStop(function() {});
-------------------------------------------------

Ajax хелперы

создать строку для url
$.param({a: {b: 1, c: 2}, d: [3, 4], e:5, f:6});
a[b]=1&a[c]=2&d[]=3&d[]=4&e=5&f=6

создать строку для url, из полей формы
$('form').serialize();
text=text1&select=select1&check=check2&radio=radio1

создать строку json, из полей формы
$('form').serializeArray();
[{name: 'text', value: 'text1'}, {name: 'select', value: 'select1'}]
-------------------------------------------------

Ajax низкоуровневый интерфейс

выполнить запрос
$.ajax(url, {settings}).done(function() {}).fail(function() {}).always(function() {});
много настроек

настройки перед запросом
$.ajaxPrefilter(function(options, originalOptions, jqXHR) {});

настройки для будущих запросов
$.ajaxSetup({options});
не рекомендуется

объект обработки запроса
$.ajaxTransport(dataType, function(options, originalOptions, jqXHR) {});
методы send и abort
-------------------------------------------------

Ajax сокращенные методы

запрос GET
$.get(url, {a:1}, function(result) {});
.done(function() {})
.fail(function() {})
.always(function() {});

запрос GET получить JSON
$.getJSON(url, {a:1}, function(result) {});
a:1 отправляется как url строка
.done(function() {})
.fail(function() {})
.always(function() {});

запрос GET получить js и выполнить
$.getScript(url, {a:1}, function(data, textStatus, jqxhr) {});
.done(function() {})
.fail(function() {})
.always(function() {});

запрос POST
$.post(url, {a:1}, function(result) {});
.done(function() {})
.fail(function() {})
.always(function() {});

сделать запрос и вставить данные
$('div').load(url, {a:1}, function(response, status, xhr) {});
get или post, определит сам
-------------------------------------------------

Аттрибуты

добавить классы
$('div').addClass('class1, class2');

удалить классы
$('div').removeClass('class1, class2');

проверить наличие класса
$('div').hasClass('class1');

добавить классы если нет, удалить если есть
$('div').toggleClass('class1');
$('div').toggleClass('class1 class2');


получить аттрибут
$('img').attr('src');

установить аттрибуты
$('img').attr('src', 'url');
$('img').attr({src, 'url', alt: 'alt'});

удалить аттрибуты
$('img').removeAttr('src alt');


получить логический аттрибут (чекбокс, радио)
input.checked
$(input).prop('checked');
$(input).is(':checked');

установить логический аттрибут (чекбокс, радио)
$('input').prop('disabled', false);
$('input').prop('checked', true);
$('input').val('value');

удалить логический аттрибут
$('input').prop('checked', false);


получить значение input, select, textarea
$('input').val();

установить значение input, select, checkbox
$('input').val('text');
$('input').val(['check1', 'radio1']);


получить html
$('div').html();

вставить html
$('div').html('html');
-------------------------------------------------

Колбеки

списки функций
передать параметр сразу во много функций

паттерн обсервер для слабой связи
publish: callbacks.fire,
subscribe: callbacks.add,
unsubscribe: callbacks.remove

флаги изменяющие поведение списка
once запуск списка 1 раз
memory обычный режим
unique нет дублей функций
stopOnFalse остановит выполнение если любая функция вернула false

начало кода
var func1 = function(param) {};
var func2 = function(param) {};
var callbacks = $.Callbacks("unique stopOnFalse");


добавить функции в список
callbacks.add(func1, func2);

удалить функции из списка
callbacks.remove(func1, func2);

удалить все функции из списка
callbacks.empty();

проверить наличие функции в списке
callbacks.has(func1);

выключить список от дальнейшего выполнения
callbacks.disable();

проверить что список выключен
callbacks.disabled();

выполнить список
callbacks.fire(param);

выполнить список в контексте
callbacks.fireWith(window, [param, param]);

проверить выполнялся ли список хоть раз
callbacks.fired();

заблокировать список от изменений
callbacks.lock();

проверить заблокирован ли список от изменений
callbacks.locked();
-------------------------------------------------

Ядро























